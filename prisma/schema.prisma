// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Project {
  id            String   @id @default(cuid())
  name          String
  clientName    String
  description   String?
  status        ProjectStatus @default(ACTIVE)
  startDate     DateTime
  endDate       DateTime?
  metadata      Json?
  
  surveys       Survey[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@index([status])
  @@index([clientName])
}

model Event {
  id            String   @id @default(cuid())
  name          String
  type          String
  location      String?
  date          DateTime
  attendeeCount Int?
  metadata      Json?
  
  surveys       Survey[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@index([date])
  @@index([type])
}

model SurveyTemplate {
  id            String   @id @default(cuid())
  name          String
  type          SurveyType
  description   String?
  schema        Json     // SurveyJS schema
  aiConfig      Json?    // AI analysis configuration
  isActive      Boolean  @default(true)
  version       Int      @default(1)
  
  surveys       Survey[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@index([type, isActive])
}

model Survey {
  id            String   @id @default(cuid())
  templateId    String
  template      SurveyTemplate @relation(fields: [templateId], references: [id])
  
  projectId     String?
  project       Project? @relation(fields: [projectId], references: [id])
  
  eventId       String?
  event         Event?   @relation(fields: [eventId], references: [id])
  
  title         String
  description   String?
  shareLink     String   @unique @default(cuid())
  status        SurveyStatus @default(DRAFT)
  expiresAt     DateTime?
  settings      Json?    // Custom settings override
  
  responses     Response[]
  analytics     SurveyAnalytics?
  
  publishedAt   DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@index([status])
  @@index([shareLink])
  @@index([projectId])
  @@index([eventId])
}

model Response {
  id            String   @id @default(cuid())
  surveyId      String
  survey        Survey   @relation(fields: [surveyId], references: [id])
  
  respondentEmail String?
  respondentName  String?
  responseData    Json    // Complete response data
  completionRate  Float   @default(0)
  
  // Tracking
  deviceInfo     Json?
  ipAddress      String?
  userAgent      String?
  
  // AI Analysis
  aiAnalysis     AIAnalysis?
  
  submittedAt   DateTime @default(now())
  createdAt     DateTime @default(now())
  
  @@index([surveyId, submittedAt])
  @@index([respondentEmail])
}

model AIAnalysis {
  id            String   @id @default(cuid())
  responseId    String   @unique
  response      Response @relation(fields: [responseId], references: [id])
  
  // Sentiment Analysis
  sentimentScore Float
  sentimentLabel SentimentLabel
  confidence    Float
  
  // Categorization
  categories    Json     // Array of categories with scores
  keyPhrases    String[]
  topics        Json?    // Extracted topics
  
  // Priority & Actions
  priority      Priority
  suggestedActions Json?
  
  // Model Tracking
  modelUsed     String
  modelVersion  String?
  processingTime Int     // milliseconds
  
  analyzedAt    DateTime @default(now())
  
  @@index([sentimentLabel])
  @@index([priority])
}

model SurveyAnalytics {
  id            String   @id @default(cuid())
  surveyId      String   @unique
  survey        Survey   @relation(fields: [surveyId], references: [id])
  
  // Response Metrics
  totalResponses Int     @default(0)
  completedResponses Int @default(0)
  avgCompletionRate Float @default(0)
  avgResponseTime Int?   // seconds
  
  // Sentiment Metrics
  avgSentiment  Float?
  sentimentDistribution Json? // {positive: %, neutral: %, negative: %}
  
  // Engagement Metrics
  npsScore      Float?
  satisfactionScore Float?
  
  // AI Insights
  topCategories Json?
  keyThemes     Json?
  trends        Json?
  recommendations Json?
  
  lastCalculated DateTime @default(now())
  
  @@index([surveyId])
}

model Notification {
  id            String   @id @default(cuid())
  type          NotificationType
  title         String
  message       String
  data          Json?    // Related entity IDs, etc.
  
  isRead        Boolean  @default(false)
  readAt        DateTime?
  
  createdAt     DateTime @default(now())
  
  @@index([type, isRead])
  @@index([createdAt])
}

// Enums
enum ProjectStatus {
  ACTIVE
  COMPLETED
  ON_HOLD
  ARCHIVED
}

enum SurveyType {
  PROJECT_FEEDBACK
  EVENT_FEEDBACK
  CUSTOM
}

enum SurveyStatus {
  DRAFT
  PUBLISHED
  CLOSED
  ARCHIVED
}

enum SentimentLabel {
  VERY_POSITIVE
  POSITIVE
  NEUTRAL
  NEGATIVE
  VERY_NEGATIVE
}

enum Priority {
  CRITICAL
  HIGH
  MEDIUM
  LOW
}

enum NotificationType {
  NEW_RESPONSE
  LOW_SENTIMENT
  SURVEY_COMPLETED
  ANALYSIS_READY
  SYSTEM_ALERT
}
